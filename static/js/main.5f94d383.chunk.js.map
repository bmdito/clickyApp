{"version":3,"sources":["components/Nav/index.js","components/Wrapper/index.js","components/Footer/index.js","components/CharTile/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","Fragment","className","currentScore","highScore","Wrapper","children","Footer","Component","CharTile","onClick","clickedHero","id","alt","src","image","shuffleArray","arr","i","length","j","Math","floor","random","_ref","console","log","App","state","characters","notClicked","undefined","_this","find","clicked","setState","stillNotClicked","filter","character","_this2","this","components_Nav","components_Wrapper","map","components_CharTile","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f94d383.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n function Nav(props){\r\n\r\n   \r\n\r\n        return (\r\n            <>\r\n                \r\n                    <ul className=\"navStyle\">\r\n                        <li><span className=\"logo\">Get Clicky!</span></li>\r\n                        <li>Current Score : <span className=\"nums\">{props.currentScore}</span></li>\r\n                        <li>High Score : <span className=\"nums\">{props.highScore}</span></li>\r\n                    </ul>\r\n                \r\n            </>\r\n        )\r\n    \r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props){\r\n    return (\r\n        <div className=\"wrapper\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React, {Component} from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Footer extends Component {\r\n    \r\n    render(){\r\n\r\n        return(\r\n            <>\r\n                <footer className=\"footStyle\">\r\n                    <ul>\r\n                        <li>Hero Clicky by Blake M Dito</li>\r\n                        <li>check out my linked in Page!</li>\r\n                        <li>check out my github!</li>\r\n                    </ul>\r\n                </footer>    \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharTile (props){\r\n    \r\n            \r\n        return(\r\n            <>\r\n                <div className=\"card\" onClick={() => props.clickedHero(props.id)}>\r\n                    <div className=\"img-container\">\r\n                        <img alt={props.id} src={props.image}/>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    \r\n}\r\n\r\nexport default CharTile;","import React, {Component} from 'react';\nimport characters from \"./characters.json\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Footer from \"./components/Footer\"\n\nimport './App.css';\nimport CharTile from './components/CharTile/index.js';\n\nfunction shuffleArray(arr) {\n\n  for(let i = arr.length-1; i>0 ; i-- ){\n      let j = Math.floor(Math.random() * (i +1));\n      [arr[i], arr[j]] = [arr[j], arr[i]] \n      \n  }\n  console.log(\"array shuffled\")\n  return arr;\n  \n}\n\n\nclass App extends Component {\n\n  state = {\n    characters,\n    notClicked: characters,\n    currentScore:0,\n    highScore:0\n  };\n\n  \n  clickedHero = id => {\n    \n    //sets variable findClicked to search for id in notClicked array\n    const findClicked= this.state.notClicked.find(clicked => clicked.id === id)\n    \n    //if undefined, id is not listed in unclicked, so HAS BEEN CLICKED\n    if(findClicked=== undefined){\n      console.log(\"failed!\")\n       \n      //reset current score\n      this.setState({\n         currentScore:0,\n         notClicked:characters,\n         \n         \n      })\n      //check to see if the current score is the new highscore, if so set highscore\n      if(this.state.currentScore> this.state.highScore){\n        this.setState({\n          highScore: this.state.currentScore,\n          \n        })\n        console.log(\"highschore\", this.state.highScore)\n      }\n\n      \n\n    } else {\n    \n      console.log(\"success\");\n    const stillNotClicked = this.state.notClicked.filter(character => character.id !== id);\n\n      this.setState({\n        notClicked:stillNotClicked,\n        currentScore:this.state.currentScore+1,\n        characters:shuffleArray(characters)\n\n      });\n      console.log(\"current score\", this.state.currentScore)\n            \n      console.log(this.state.notClicked);\n\n    }\n  }\n  \n\n  render(){\n\n    \n    \n    return (\n      \n        <>\n          <Nav \n            currentScore={this.state.currentScore}\n            highScore={this.state.highScore}\n          />\n          <Wrapper>\n            \n            {this.state.characters.map(character => \n                  <CharTile\n                      key={character.id}\n                      id={character.id}\n                      image={character.image}\n                      clickedHero = {this.clickedHero}\n                      \n                      \n                  />\n              )}\n          </Wrapper>\n          <Footer/>\n        </>\n\n      );\n    }\n\n }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}